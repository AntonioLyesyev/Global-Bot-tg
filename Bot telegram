import requests
from datetime import datetime
from pprint import pprint
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler




BOT_API_KEY = ''         #inserisci qui l'API/TOKEN del tuo bot telegram
bot_username = '@'       #inserisci qui l'username del tuo bot
WEATHER_API_KEY = ''     # Inserisci qui il tuo API key per OpenWeatherMap
NEWS_API_KEY = ''        # Inserisci qui il tuo API key per NewsAPI
DICTIONARY_API_KEY = ''  # Inserisci qui il tuo API key per API Ninjas
DEEPL_API_KEY = ''       #Inserisci qui il tuo API per DEELP




#comandi
async def start_command(update, context):
    await update.message.reply_text('ciao prova bot start')
    
async def help_command(update, context):
    await update.message.reply_text('ciao prova help')
    
async def custom_command(update, context):
    await update.message.reply_text('ciao prova custom')
    
    
    
    
#risposte

def handle_response(text) -> str:
    processed=text.lower()
    if 'hello' in processed:
      return 'hey'
    if 'come va' in processed:
      return 'ahoy'




#message handler group o private
async def handle_message(update, context):
    message_type=update.message.chat.type
    text=update.message.text
    
    print(f'User({update.message.chat.id})in {message_type}: {text}')
    
    if message_type == 'group':
        if bot_username in text:
            new_text=text.replace(bot_username,'').strip()
            response=handle_response(new_text)
        else:
            return
    else:
        response=handle_response(text)
        
    print('Bot', response)
    await update.message.reply_text(response)




#errore
async def error(update, context):
    print(f'Update {update} caused error {context.error}')
    
    
    
    
#funzione start che fortnisce il messaggio con le opzioni
async def start(update, context):
    keyboard = [
        [InlineKeyboardButton("Informazioni meteo", callback_data='opzione1')],
        [InlineKeyboardButton("News", callback_data='opzione2')],
        [InlineKeyboardButton("Dizionario", callback_data='opzione3')],
        [InlineKeyboardButton("Opzione 4", callback_data='opzione4')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('Scegli un\'opzione:', reply_markup=reply_markup)
    
    
    
#funzioni alla pressione
async def opzione1(update, context):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("Inserisci il nome della città:")
    context.user_data['waiting_for_city'] = True

async def opzione2(update, context):
    result = 'opzione 2'
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(result)

async def opzione3(update, context):
    result = 'opzione 3'
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(result)

async def opzione4(update, context):
    result = 'opzione 4'
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(result)
    
    
    
    
#manage della città  
async def handle_city(update, context):
    message_type = update.message.chat.type
    text = update.message.text
    
    print(f'User({update.message.chat.id}) in {message_type}: {text}')
    
    if context.user_data.get('waiting_for_city'):
        if text:
            city = text
            result = get_weather(city)
            await update.message.reply_text(result)
            del context.user_data['waiting_for_city']
        else:
            await update.message.reply_text("Il nome della città non può essere vuoto. Riprova.")
        return
    
    if message_type == 'group':
        if bot_username in text:
            new_text = text.replace(bot_username,'').strip()
            response = handle_response(new_text)
        else:
            return
    else:
        response = handle_response(text)
        
    print('Bot', response)
    await update.message.reply_text(response)



    
#informazioni meteo 
def get_weather(city):
    base_url = f"http://api.openweathermap.org/data/2.5/weather?appid={WEATHER_API_KEY}&q={city}&units=metric&lang=it"
    
    try:
        weather_data = requests.get(base_url).json()
        
        if weather_data.get('cod') != 200:
            return f"Errore: {weather_data.get('message')}"
        else:
            weather_values = {
                'Descrizione': weather_data['weather'][0]['description'],
                'Temperatura': f"{weather_data['main']['temp']}°C",
                'Temperatura Massima': f"{weather_data['main']['temp_max']}°C",
                'Temperatura Minima': f"{weather_data['main']['temp_min']}°C",
                'Umidità': f"{weather_data['main']['humidity']}%",
                'Pressione': f"{weather_data['main']['pressure']} hPa",
                'Vento': f"{weather_data['wind']['speed']} m/s"
            }
            result = f"Previsioni meteo per {city}:\n"
            for key, value in weather_values.items():
                result += f"{key}: {value}\n"
            return result
    except Exception as e:
        return f"Si è verificato un errore: {e}"
    

    
    
#main
   
if __name__ == '__main__':
    print('Starting bot...')
    app = Application.builder().token(BOT_API_KEY).build()
    
    # Funzioni / e funzioni pulsante
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('custom', custom_command))
    app.add_handler(CallbackQueryHandler(opzione1, pattern='^opzione1$'))
    app.add_handler(CallbackQueryHandler(opzione2, pattern='^opzione2$'))
    app.add_handler(CallbackQueryHandler(opzione3, pattern='^opzione3$'))
    app.add_handler(CallbackQueryHandler(opzione4, pattern='^opzione4$'))
    
    #gestione messaggi
    app.add_handler(MessageHandler(None, handle_city))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    
    #gestione errori
    app.add_error_handler(error)

    #polling(frequenza di aggiornamento cotrollo messaggi )
    print('Polling...')
    app.run_polling(poll_interval=5)
        
